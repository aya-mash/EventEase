// <auto-generated />
using System;
using EventEaseAdmin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventEaseAdmin.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250916212329_SeedInitialData")]
    partial class SeedInitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventEaseAdmin.Models.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint");

                    b.HasKey("BookingId");

                    b.HasIndex("EventId");

                    b.HasIndex("VenueId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("11111111-1111-1111-1111-111111111111"),
                            BookingDate = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndAt = new DateTime(2025, 10, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 1L,
                            StartAt = new DateTime(2025, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Confirmed",
                            VenueId = 1L
                        },
                        new
                        {
                            BookingId = new Guid("22222222-2222-2222-2222-222222222222"),
                            BookingDate = new DateTime(2025, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndAt = new DateTime(2025, 11, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 2L,
                            StartAt = new DateTime(2025, 11, 15, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            VenueId = 2L
                        },
                        new
                        {
                            BookingId = new Guid("33333333-3333-3333-3333-333333333333"),
                            BookingDate = new DateTime(2025, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndAt = new DateTime(2025, 12, 5, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            EventId = 3L,
                            StartAt = new DateTime(2025, 12, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Cancelled",
                            VenueId = 3L
                        });
                });

            modelBuilder.Entity("EventEaseAdmin.Models.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Organization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1L,
                            Email = "alice@example.com",
                            FullName = "Alice Smith",
                            Organization = "Acme Corp",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            CustomerId = 2L,
                            Email = "bob@example.com",
                            FullName = "Bob Johnson",
                            Organization = "Beta LLC",
                            Phone = "234-567-8901"
                        },
                        new
                        {
                            CustomerId = 3L,
                            Email = "carol@example.com",
                            FullName = "Carol Lee",
                            Organization = "Gamma Inc",
                            Phone = "345-678-9012"
                        });
                });

            modelBuilder.Entity("EventEaseAdmin.Models.Event", b =>
                {
                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventId"));

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("VenueId")
                        .HasColumnType("bigint");

                    b.HasKey("EventId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1L,
                            CustomerId = 1L,
                            Description = "Annual technology expo.",
                            EventDate = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Tech Expo",
                            VenueId = 1L
                        },
                        new
                        {
                            EventId = 2L,
                            CustomerId = 2L,
                            Description = "Business leaders summit.",
                            EventDate = new DateTime(2025, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Business Summit",
                            VenueId = 2L
                        },
                        new
                        {
                            EventId = 3L,
                            CustomerId = 3L,
                            Description = "Outdoor music festival.",
                            EventDate = new DateTime(2025, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventName = "Music Festival",
                            VenueId = 3L
                        });
                });

            modelBuilder.Entity("EventEaseAdmin.Models.Venue", b =>
                {
                    b.Property<long>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VenueId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VenueName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            VenueId = 1L,
                            Capacity = 500,
                            IsActive = true,
                            Location = "123 Main St",
                            VenueName = "Grand Hall"
                        },
                        new
                        {
                            VenueId = 2L,
                            Capacity = 200,
                            IsActive = true,
                            Location = "456 Elm St",
                            VenueName = "Conference Center"
                        },
                        new
                        {
                            VenueId = 3L,
                            Capacity = 1000,
                            IsActive = false,
                            Location = "789 Oak St",
                            VenueName = "Open Air Arena"
                        });
                });

            modelBuilder.Entity("EventEaseAdmin.Models.Booking", b =>
                {
                    b.HasOne("EventEaseAdmin.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventEaseAdmin.Models.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EventEaseAdmin.Models.Event", b =>
                {
                    b.HasOne("EventEaseAdmin.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EventEaseAdmin.Models.Venue", null)
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
